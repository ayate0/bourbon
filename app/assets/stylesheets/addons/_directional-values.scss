/// directional-property mixins are shorthands
/// for writing properties like the following
///
/// @ignore You can also use `false` instead of `null`.
///
/// @param {List} $vals
///   List of directional values
///
/// @example scss - Usage
///   .wrapper {
///     @include margin(null 0 10px);
///     @include border-style(dotted null);
///   }
///
/// @example css - CSS Output
///   .wrapper {
///     margin-right: 0;
///     margin-bottom: 10px;
///     margin-left: 0;
///     border-top-style: dotted;
///     border-bottom-style: dotted;
///   }
///
/// @require {function} contains-falsy
///
/// @return {List}

@function collapse-directionals($vals) {
  $output: null;

  $A: nth( $vals, 1 );
  $B: if( length($vals) < 2, $A, nth($vals, 2));
  $C: if( length($vals) < 3, $A, nth($vals, 3));
  $D: if( length($vals) < 2, $A, nth($vals, if( length($vals) < 4, 2, 4) ));

  @if $A == 0 { $A: 0 }
  @if $B == 0 { $B: 0 }
  @if $C == 0 { $C: 0 }
  @if $D == 0 { $D: 0 }

  @if $A == $B and $A == $C and $A == $D { $output: $A          }
  @else if $A == $C and $B == $D         { $output: $A $B       }
  @else if $B == $D                      { $output: $A $B $C    }
  @else                                  { $output: $A $B $C $D }

  @return $output;
}





/// Checks a list of values to see if it contains a falsy one.
/// If it does, it returns `false`, else `true`.
///
/// @param {List} $list
///   List of values to check to see if it contains a falsy one
///
/// @return {Bool}

@function contains-falsy($list) {
  @each $item in $list {
    @if not $item {
      @return true;
    }
  }

  @return false;
}





/// Output directional properties, for instance `margin`.
///
/// @access private
///
/// @param {String} $pre
///   Prefix to use
/// @param {String} $suf
///   Suffix to use
/// @param {List} $vals
///   List of values
///
/// @require {function} collapse-directionals
/// @require {function} contains-falsy

@mixin directional-property($pre, $suf, $vals) {
  // Property Names
  $top:    $pre + "-top"    + if($suf, "-#{$suf}", "");
  $bottom: $pre + "-bottom" + if($suf, "-#{$suf}", "");
  $left:   $pre + "-left"   + if($suf, "-#{$suf}", "");
  $right:  $pre + "-right"  + if($suf, "-#{$suf}", "");
  $all:    $pre +             if($suf, "-#{$suf}", "");

  $vals: collapse-directionals($vals);

  @if contains-falsy($vals) {
    @if nth($vals, 1) { #{$top}: nth($vals, 1); }

    @if length($vals) == 1 {
      @if nth($vals, 1) { #{$right}: nth($vals, 1); }
    } @else {
      @if nth($vals, 2) { #{$right}: nth($vals, 2); }
    }

    // prop: top/bottom right/left
    @if length($vals) == 2 {
      @if nth($vals, 1) { #{$bottom}: nth($vals, 1); }
      @if nth($vals, 2) { #{$left}:   nth($vals, 2); }

    // prop: top right/left bottom
    } @else if length($vals) == 3 {
      @if nth($vals, 3) { #{$bottom}: nth($vals, 3); }
      @if nth($vals, 2) { #{$left}:   nth($vals, 2); }

    // prop: top right bottom left
    } @else if length($vals) == 4 {
      @if nth($vals, 3) { #{$bottom}: nth($vals, 3); }
      @if nth($vals, 4) { #{$left}:   nth($vals, 4); }
    }

  // prop: top/right/bottom/left
  } @else {
    #{$all}: $vals;
  }
}

/// Margin helper
///
/// @access public
///
/// @param {Arglist} $vals
///   List of arguments
///
/// @require {mixin} directional-property
///
/// @output `margin`
@mixin margin($vals...) {
  @include directional-property(margin, false, $vals...);
}

/// Padding helper
///
/// @access public
///
/// @param {Arglist} $vals
///   List of arguments
///
/// @require {mixin} directional-property
///
/// @output `padding`
@mixin padding($vals...) {
  @include directional-property(padding, false, $vals...);
}

/// Border-style helper
///
/// @access public
///
/// @param {Arglist} $vals
///   List of arguments
///
/// @require {mixin} directional-property
///
/// @output `border-style`
@mixin border-style($vals...) {
  @include directional-property(border, style, $vals...);
}

/// Border-color helper
///
/// @access public
///
/// @param {Arglist} $vals
///   List of arguments
///
/// @require {mixin} directional-property
///
/// @output `border-color`
@mixin border-color($vals...) {
  @include directional-property(border, color, $vals...);
}

/// Border-width helper
///
/// @access public
///
/// @param {Arglist} $vals
///   List of arguments
///
/// @require {mixin} directional-property
///
/// @output `border-width`
@mixin border-width($vals...) {
  @include directional-property(border, width, $vals...);
}
